import static org.junit.Assert.*;

import gameObjects.*;
import move.*;
import org.junit.*;

public class SnakeTest {

	@Test
	public void test_setXCoord_ValueLargerThanMax() {
		Point p = new Point(2000, 200);
		p.setXCoord(2000);
		assertEquals("X-Coordinate should be set to minimum value", 8, p.getXCoord());
	}

	@Test
	public void test_setXCoord_ValueSmallerThanMin() {
		Point p = new Point(0, 200);
		p.setXCoord(0);
		assertEquals("X-Coordinate should be set to minimum value", 788, p.getXCoord());
	}
	
	@Test
	public void test_setYCoord_ValueLargerThanMax() {
		Point p = new Point(200, 2000);
		p.setYCoord(2000);
		assertEquals("X-Coordinate should be set to minimum value", 30, p.getYCoord());
	}
	
	@Test
	public void test_setYCoord_ValueSmallerThanMin() {
		Point p = new Point(200, 0);
		p.setYCoord(0);
		assertEquals("X-Coordinate should be set to minimum value", 780, p.getYCoord());
	}

	
	@Test
	public void test_foodBoolean_FoodLocationIsSnakeLocation() {
		Food l = new Food(new Point(0,0), 15);
		assertTrue("Strings are equal.  Method should return true", l.foodBoolean("", ""));
	}
	
	@Test
	public void test_foodBoolean_FoodLocationIsNotSnakeLocation() {
		Food l = new Food(new Point(0,0), 15);
		assertFalse("Strings are not equal.  Method should return false", l.foodBoolean("it's", "different"));
	}
	
	@Test
	public void test_newLoc_PointIsDifferent() {
		Food l = new Food(new Point(0,0), 15);
		assertNotSame("A new point should have been generated when newLoc was called.", l.newLoc(26), l.newLoc(26));
	}
	
	@Test
	public void test_getPoint_PointIsSame() {
		Point p = new Point(5,30);
		Snake l = new Snake(p,2);
		assertEquals("Getter method for point should return", p,l.getTopLeft());
	}
	
	@Test
	public void test_getSize_SizeIsSame() {
		Point p = new Point(5,30);
		Snake s = new Snake(p,20);
		assertEquals("Getter method for size should return", 20, s.getSize());
	}
	
	@Test
	public void test_getDir_DirectionIsTheSame() {
		Point p = new Point(5, 30);
		Snake s = new Snake(p, 20);
		s.setDir("up");
		assertEquals("Strings should be equal", "up",s.getDir());
	}
	
	@Test
	public void test_setDir_CorrectInput() {
		Point p = new Point(2, 40);
		Snake s = new Snake(p, 3);
		s.setDir("down");
		s.setDir("arsenal");
		assertEquals("setting direction that isnt: up, down, left, right.", "down", s.getDir());
	}
}
